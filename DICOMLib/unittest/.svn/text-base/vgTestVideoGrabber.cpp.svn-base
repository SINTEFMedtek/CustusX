#include "vgTestVideoGrabber.h"
#include <QTemporaryFile>

#include "SonoWand.h"

void TestVideoGrabber::setUp()
{
	SW_Init("com.sonowand.VideoGrabber.unittest");
	videograbber = new VideoGrabber();
}

void TestVideoGrabber::tearDown()
{
	delete videograbber;
	SW_Done();
}

void TestVideoGrabber::testDummy()
{
	CPPUNIT_ASSERT(true);
}

void TestVideoGrabber::testConstructor()
{
	CPPUNIT_ASSERT(videograbber->getStatus() == videograbber->RUNNING);
}

void TestVideoGrabber::testProcessBuffer()
{
	QDateTime before = videograbber->shmServer->lastTimestamp();
	videograbber->processBuffer(0);
	CPPUNIT_ASSERT( !videograbber->shmServer->hasBuffer() );
	CPPUNIT_ASSERT( videograbber->shmServer->lastTimestamp() > before );
}

void TestVideoGrabber::vgPong()
{
	vgPongReceived = true;
}

void TestVideoGrabber::snapshotDone(QString filename, quint32 timestamp)
{
	snapshotFilename = filename;
	snapshotTimestamp = timestamp;
}

void TestVideoGrabber::streamingParameters(QString shmkey, int width, int height, int depth)
{
	streamShmkey = shmkey;
	streamWidth = width;
	streamHeight = height;
	streamDepth = depth;
}

void TestVideoGrabber::infoReceived(QStringList keys, QStringList values)
{
	infoKeys = keys;
	infoValues = values;
	mInfoReceived = true;
}

void TestVideoGrabber::testGlobalPing()
{
	vgPongReceived = false;
	connect(videograbber, SIGNAL(pong()), this, SLOT(vgPong()));
	videograbber->globalPing();
	CPPUNIT_ASSERT(vgPongReceived);
}

void TestVideoGrabber::testInfo()
{
	mInfoReceived = false;
	connect(videograbber, SIGNAL(info(QStringList, QStringList)), this, SLOT(infoReceived(QStringList, QStringList)));
	videograbber->addInfo("key", "value");
	videograbber->globalInfo();
	CPPUNIT_ASSERT(mInfoReceived);
	CPPUNIT_ASSERT(infoKeys.size() == infoValues.size());
	CPPUNIT_ASSERT(infoKeys.size() >= 1);
	CPPUNIT_ASSERT_EQUAL(QString("key").toStdString(), infoKeys.last().toStdString());
	CPPUNIT_ASSERT_EQUAL(QString("value").toStdString(), infoValues.last().toStdString());
}

void TestVideoGrabber::testSnapshot()
{
	snapshotFilename="";
	snapshotTimestamp = 0;
	connect(videograbber, SIGNAL(snapshotDone(QString, quint32)), this, SLOT(snapshotDone(QString, quint32)));
	QTemporaryFile tmpfile("XXXXXX.png");
	tmpfile.open();
	QString requestFilename = tmpfile.fileName();
	videograbber->snapshot(requestFilename);
	CPPUNIT_ASSERT_EQUAL(requestFilename.toStdString(), snapshotFilename.toStdString());
	CPPUNIT_ASSERT(tmpfile.size() > 0);
	CPPUNIT_ASSERT(snapshotTimestamp != 0);
	CPPUNIT_ASSERT(QFile(requestFilename).exists());
}

void TestVideoGrabber::testRequestStreaming()
{
	streamWidth = -1;
	connect(videograbber, SIGNAL(streamingParameters(QString, int, int, int)), this, SLOT(streamingParameters(QString, int, int, int)));
	CPPUNIT_ASSERT_EQUAL(0, videograbber->clientCount);
	videograbber->requestStreamingParameters();
	videograbber->startCapture();
	CPPUNIT_ASSERT_EQUAL(1, videograbber->clientCount);
	CPPUNIT_ASSERT(streamWidth != -1);
	CPPUNIT_ASSERT_EQUAL(24, streamDepth);
	CPPUNIT_ASSERT(streamWidth > 0);
	CPPUNIT_ASSERT(streamHeight > 0);
	CPPUNIT_ASSERT(streamWidth < 5000);
	CPPUNIT_ASSERT(streamHeight < 5000);
}

void TestVideoGrabber::testStopStreaming()
{
	videograbber->startCapture();
	CPPUNIT_ASSERT_EQUAL(1, videograbber->clientCount);
	videograbber->stopStreaming();
	CPPUNIT_ASSERT_EQUAL(0, videograbber->clientCount);
}

void TestVideoGrabber::testShutdown()
{
	videograbber->shutdown();
}
CPPUNIT_TEST_SUITE_REGISTRATION( TestVideoGrabber );



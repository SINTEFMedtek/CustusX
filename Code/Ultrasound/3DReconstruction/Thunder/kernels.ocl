// This file is part of SSC,
// a C++ Library supporting Image Guided Therapy Applications.
//
// Copyright (C) 2008- SINTEF Medical Technology
// Copyright (C) 2008- Sonowand AS
//
// SSC is owned by SINTEF Medical Technology and Sonowand AS,
// hereafter named the owners. Each particular piece of code
// is owned by the part that added it to the library.
// SSC source code and binaries can only be used by the owners
// and those with explicit permission from the owners.
// SSC shall not be distributed to anyone else.
//
// SSC is distributed WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE.
//
// See sscLicense.txt for more information.

//#define pixel_pos_c(a,i,c) (pixel_pos[(a)/(bscan_n/6)][((a)-(a)/(bscan_n/6)*(bscan_n/6))*3*mask_size + (i)*3 + (c)])
#define pixel_pos_c(a,i,c) (pixel_pos[(a)/(bscan_n/5)][((a)-((a)/(bscan_n/5))*(bscan_n/6))*3*mask_size + (i)*3 + (c)])
#define pos_matrices_a(n,x,y) (pos_matrices[(n)*12 + (y)*4 + (x)])
#define inrange(x,a,b) ((x) >= (a) && (x) < (b))
#define volume_a(x,y,z) (volume[(x) + (y)*volume_w + (z)*volume_w*volume_h])

//#include <stdio.h>

__kernel void round_off_translate(__global float * pixel_pos0,
		__global float * pixel_pos1,
		__global float * pixel_pos2,
		__global float * pixel_pos3,
		__global float * pixel_pos4,
		__global float * pixel_pos5,
		float volume_spacing,
		int mask_size,
		float origo_x,
		float origo_y,
		float origo_z,
		int bscan_n)
{
	int n = get_global_id(0);
	if (n >= bscan_n*mask_size) return;

	int a = n/mask_size;
	int i = n%mask_size;

	__global float * pixel_pos[6] =
	{	pixel_pos0, pixel_pos1, pixel_pos2, pixel_pos3, pixel_pos4, pixel_pos5};

	pixel_pos_c(a,i,0) = (int)((pixel_pos_c(a,i,0)-origo_x)/volume_spacing);
	pixel_pos_c(a,i,1) = (int)((pixel_pos_c(a,i,1)-origo_y)/volume_spacing);
	pixel_pos_c(a,i,2) = (int)((pixel_pos_c(a,i,2)-origo_z)/volume_spacing);
}

__kernel void fill_volume(__global float * pixel_pos0,
		__global float * pixel_pos1,
		__global float * pixel_pos2,
		__global float * pixel_pos3,
		__global float * pixel_pos4,
		__global float * pixel_pos5,
		__global unsigned int * pixel_ill,
		int mask_size,
		__global unsigned int * volume,
		int volume_n,
		int volume_h,
		int volume_w,
		int bscan_n)
{

	int n = get_global_id(0);
	if (n > bscan_n*mask_size) return;

	int a = n/mask_size;
	int i = n%mask_size;

	__global float * pixel_pos[6] =
	{	pixel_pos0, pixel_pos1, pixel_pos2, pixel_pos3, pixel_pos4, pixel_pos5};

	int x = pixel_pos_c(a,i,0);
	int y = pixel_pos_c(a,i,1);
	int z = pixel_pos_c(a,i,2);
	if (inrange(x,0,volume_w) && inrange(y,0,volume_h) && inrange(z,0,volume_n))
	volume_a(x,y,z) = pixel_ill[a*mask_size + i];
}

__kernel void transform(__global float * pixel_pos0,
		__global float * pixel_pos1,
		__global float * pixel_pos2,
		__global float * pixel_pos3,
		__global float * pixel_pos4,
		__global float * pixel_pos5,
		__global float * pos_matrices,
		int mask_size,
		int bscan_n)
{
	int n = get_global_id(0);
	if (n >= bscan_n*mask_size) return;

	int a = n/mask_size;
	int i = n%mask_size;

	__global float * pixel_pos[6] =
	{	pixel_pos0, pixel_pos1, pixel_pos2, pixel_pos3, pixel_pos4, pixel_pos5};

	float sum0, sum1, sum2;
	for (int y = 0; y < 3; y++)
	{
		float sum = 0;
		for (int x = 0; x < 3; x++)
		sum += pos_matrices_a(a,x,y)*pixel_pos_c(a,i,x);
		//sum += pos_matrices_a(a,x,y)*pixel_pos[f][(a-f*(bscan_n/6))*mask_size*3 + i*3+x];
		sum += pos_matrices_a(a,3,y);
		if (y==0) sum0=sum;
		else if (y==1) sum1=sum;
		else sum2=sum;
	}
	pixel_pos_c(a,i,0) = sum0; pixel_pos_c(a,i,1) = sum1; pixel_pos_c(a,i,2) = sum2;
}

//#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable // warning: unknown action for '#pragma OPENCL' - ignored
//#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable // warning: unknown action for '#pragma OPENCL' - ignored

__kernel void fill_pixel_ill_pos(__global unsigned int * bscans0,
		__global unsigned int * bscans1,
		__global unsigned int * mask,
		__global float * pixel_pos0,
		__global float * pixel_pos1,
		__global float * pixel_pos2,
		__global float * pixel_pos3,
		__global float * pixel_pos4,
		__global float * pixel_pos5,
		__global unsigned int * pixel_ill,
		int mask_size,
		int bscan_n,
		int bscan_h,
		int bscan_w,
		float bscan_spacing_x,
		float bscan_spacing_y)
{

	int n = get_global_id(0);
	if (n >= bscan_n) return;

	//int f = n/(bscan_n/(6-1));

	__global float * pixel_pos[6] =
	{	pixel_pos0, pixel_pos1, pixel_pos2, pixel_pos3, pixel_pos4, pixel_pos5};
	/*__global float * pixel_pos;
	 if (f == 0) pixel_pos = pixel_pos0;
	 if (f == 1) pixel_pos = pixel_pos1;
	 if (f == 2) pixel_pos = pixel_pos2;
	 if (f == 3) pixel_pos = pixel_pos3;
	 if (f == 4) pixel_pos = pixel_pos4;
	 if (f == 5) pixel_pos = pixel_pos5;
	 */

	int mask_counter = 0;
	for (int y = 0; y < bscan_h; y++)
	{
		for (int x = 0; x < bscan_w; x++)
		{
			unsigned char foo = 1 << (y*bscan_w + x)%8;
			unsigned char mask_bit = mask[(x + y*bscan_w)/8] & foo;
			if (mask_bit != 0)
			{
				unsigned char ill;
				if (n < bscan_n/2)
				{
					int shift = 8*((x + y*bscan_w + n*bscan_w*bscan_h)%4);
					unsigned int char_int = bscans0[(x + y*bscan_w + n*bscan_w*bscan_h)/4] >> shift;
					ill = char_int & 255;
				}
				else
				{
					int shift = 8*((x + y*bscan_w + (n-bscan_n/2)*bscan_w*bscan_h)%4);
					unsigned int char_int = bscans1[(x + y*bscan_w + (n-bscan_n/2)*bscan_w*bscan_h)/4] >> shift;
					ill = char_int & 255;
				}
				pixel_ill[n*mask_size + mask_counter] = ill;
				pixel_pos_c(n,mask_counter,0) = 0;
				pixel_pos_c(n,mask_counter,1) = x*bscan_spacing_x;
				pixel_pos_c(n,mask_counter,2) = y*bscan_spacing_y;
				//pixel_pos[f][(n-f*(bscan_n/6+1))*mask_size*3 + mask_counter*3+0] = 0;
				//pixel_pos[f][(n-f*(bscan_n/6+1))*mask_size*3 + mask_counter*3+1] = x*bscan_spacing_x;
				//pixel_pos[f][(n-f*(bscan_n/6+1))*mask_size*3 + mask_counter*3+2] = y*bscan_spacing_y;
				mask_counter++;
			}
		}
	}
}

__kernel void fill_holes(__global unsigned int * volume,
		int volume_n,
		int volume_h,
		int volume_w)
{
	// Assumes no black ultrasound input data
#define kernel_size 3
#define half_kernel (kernel_size/2)
#define cutoff (kernel_size*kernel_size*kernel_size/2.0f - kernel_size)

	int n = get_global_id(0);

	int z = n/(volume_h*volume_w) + half_kernel;
	int y = (n/volume_w)%volume_h + half_kernel;
	int x = n%volume_w + half_kernel;
	if (z >= volume_n-half_kernel || y >= volume_h-half_kernel || x >= volume_w-half_kernel) return;

	if (volume_a(x,y,z) == 0)
	{
		int sum = 0;
		int sum_counter = 0;
		for(int i = -half_kernel; i <= half_kernel; i++)
		for(int j = -half_kernel; j <= half_kernel; j++)
		for(int k = -half_kernel; k <= half_kernel; k++)
		if (volume_a(x+i,y+j,z+k) != 0)
		{
			sum += volume_a(x+i,y+j,z+k);
			sum_counter++;
		}
		if (sum_counter > cutoff && sum/(float)sum_counter <= 255) volume_a(x,y,z) = sum/(float)sum_counter;
	}
}

__kernel void build_ray_dirs(__global unsigned int * volume,
		int volume_w,
		int volume_h,
		int volume_n,
		__global float4 * ray_dirs,
		int bitmap_w,
		int bitmap_h,
		float4 camera_pos,
		float4 camera_lookat/*,
		 __global float * printings*/)
{
	int n = get_global_id(0);
	if (n >= bitmap_w*bitmap_h) return;

	int ray_x = n%bitmap_w;
	int ray_y = n/bitmap_w;

	float4 camera_forward = normalize(camera_lookat - camera_pos);
	float4 temp_up =
	{	0, 1, 0, 0};
	float4 camera_right = normalize(cross(temp_up, camera_forward));
	float4 camera_up = normalize(cross(camera_right, camera_forward));

	float fov_hor = 45/2;
	float fov_ver = fov_hor*bitmap_h/(float)bitmap_w;
	fov_hor = fov_hor/180.0f*3.14f;
	fov_ver = fov_ver/180.0f*3.14f;

	float4 step_forward = camera_forward;
	//float temp = 1/cos(fov_hor);
	//temp *= sin(fov_hor);
	float temp = (ray_x-bitmap_w/2)/(float)(bitmap_w/2);
	float4 step_right = temp * fov_hor * camera_right;
	//temp = 1/cos(fov_ver);
	//temp *= sin(fov_ver);
	temp = (ray_y-bitmap_h/2)/(float)(bitmap_h/2);
	float4 step_up = temp * fov_ver * camera_up;
	float4 ray_dir = normalize(step_forward + step_right + step_up);

	ray_dirs[n] = ray_dir;

	//printings[n*3+0] = ray_dir.x;
	//printings[n*3+1] = ray_dir.y;
	//printings[n*3+2] = ray_dir.z;
}

__kernel void cast_rays(__global unsigned int * volume,
		int volume_w,
		int volume_h,
		int volume_n,
		__global float4 * ray_dirs,
		__global unsigned int * bitmap,
		int bitmap_w,
		int bitmap_h,
		float4 camera_pos,
		float4 camera_lookat/*,
		 __global float * printings*/)
{
	int n = get_global_id(0);
	if (n >= bitmap_w*bitmap_h) return;

	int ray_x = n%bitmap_w;

	int ray_y = n/bitmap_w;

	float4 ray_dir = ray_dirs[n];

#define step_size 1.0f
	//#define transparent_level 54
	//#define transparency_ajustment 0.4f
#define transparent_level 60
#define transparency_ajustment 0.5f
#define ray_strength_cutoff (255/10.0f)

	unsigned char accum = 0;
	float t = 0;

	float4 volume_0 =
	{	0, 0, 0, 0};
	float4 volume_1 =
	{	volume_w-1, volume_h-1, volume_n-1, 0};

	float4 foo0 = (volume_0 - camera_pos)/ray_dir;
	float4 foo1 = (volume_1 - camera_pos)/ray_dir;
	foo0 = min(foo0, foo1);
	t = max(foo0.x, max(foo0.y, foo0.z)) + 2;

	float4 t_pos = camera_pos + t*ray_dir;

	if (t_pos.x > 0 && t_pos.x < volume_w-1 &&
			t_pos.y > 0 && t_pos.y < volume_h-1 &&
			t_pos.z > 0 && t_pos.z < volume_n-1)
	{
		float ray_strength = 255;
		unsigned char voxel;
		float transparency;
		while(true)
		{
			if (t_pos.x < 0 || t_pos.x > volume_w-1 ||
					t_pos.y < 0 || t_pos.y > volume_h-1 ||
					t_pos.z < 0 || t_pos.z > volume_n-1)
			{
				break;
			}
			if (ray_strength < ray_strength_cutoff) break;

			voxel = volume_a((int)t_pos.x, (int)t_pos.y, (int)t_pos.z);
			if (voxel < transparent_level) voxel = 0;

			transparency = min((1 - voxel/255.0f) + transparency_ajustment, 1.0f);

			accum += ray_strength * (1-transparency);
			ray_strength *= transparency;

			t += step_size;
			t_pos = camera_pos + t*ray_dir;
		}
	}
	else
	{ // miss
		accum = ((ray_x+ray_y)%2)*150;
	}

	/*int shift = 3*8 - 8*((ray_x + ray_y*bitmap_w)%4);
	 unsigned int mask_bitmask = 255 << shift;
	 unsigned int bitmap_now = bitmap[(ray_x + ray_y*bitmap_w)/4];
	 unsigned int accum_int = (unsigned int)accum;
	 bitmap[(ray_x + ray_y*bitmap_w)/4] = (bitmap_now & ~mask_bitmask) | ~mask_bitmask;*/

	bitmap[ray_x + ray_y*bitmap_w] = accum;

	//printings[n*3+0] = ray_dir.x;
	//printings[n*3+1] = ray_dir.y;
	//printings[n*3+2] = ray_dir.z;
	//printings[n] = t;
}

#define _distance(v, plane) (plane.x*v.x + plane.y*v.y + plane.z*v.z + plane.w)/sqrt(plane.x*plane.x + plane.y*plane.y + plane.z*plane.z)
#define plane_points_c(n,i) (plane_points[(n)*3 + (i)])

#define VOL_BLOCK_X
#define VOL_BLOCK_Y
#define VOL_BLOCK_Z

typedef struct _pixel_type
{
	int x;
	int y;
} pixel_type;

// Find pixels coordinates
pixel_type findPixel(
		float bscan_spacing_x,
		float bscan_spacing_y,
		__global float4 * plane_eq,
		__global float4 * plane_points,
		int current_bscan,
		float dist,
		float4 voxel_coord
)
{

	float4 normal =
	{	plane_eq[current_bscan].x, plane_eq[current_bscan].y, plane_eq[current_bscan].z, 0.0f};
	float4 corner0 = plane_points_c(current_bscan,0);
	float4 cornerx = plane_points_c(current_bscan,1);
	float4 cornery = plane_points_c(current_bscan,2);

	float4 p = voxel_coord + -dist*normal - corner0;
	float4 x_vector = normalize(cornerx - corner0);
	float4 y_vector = normalize(cornery - corner0);

	pixel_type retval;
	retval.x = dot(p, x_vector)/bscan_spacing_x;
	retval.y = dot(p, y_vector)/bscan_spacing_y;
	return retval;
}

bool valid_pixel(pixel_type p,
		__global unsigned char * mask,
		int bscan_w,
		int bscan_h,
		float dist,
		float kernel_radius)
{
	return ((p.x >= 0) && (p.x < bscan_w) && (p.y >= 0) && (p.y < bscan_h))
	&& (fabs(dist) < kernel_radius)
	&& (mask[p.x + p.y*bscan_w] != 0);
}

/*__kernel int find_closest_bscan(__global unsigned char * mask,
 int bscan_w,
 int bscan_h,
 int bscan_n,
 float bscan_spacing_x,
 float bscan_spacing_y,
 __global float4 * plane_eq,
 __global float4 * plane_points,
 int init_bscan,
 float init_dist,
 float kernel_radius,
 float4 voxel_coord)
 { 
 int done_up = 0;
 int done_down = 0;
 int n = 0;
 float temp_dist = 10000;
 int min_bscan = -1;
 
 for (int i = 1; !done_down || !done_up; i++)
 {
 if (!done_up)
 {
 n = init_bscan + i;
 temp_dist = fabs(_distance(voxel_coord, plane_eq[n]));
 
 if (temp_dist < init_dist)
 {
 pixel_type p_temp = findPixel(bscan_spacing_x, bscan_spacing_y, plane_eq, plane_points, n, temp_dist, voxel_coord);
 if (valid_pixel(p_temp, mask, bscan_w, bscan_h, temp_dist, kernel_radius))
 {
 //p = p_temp;
 min_bscan = n;
 init_dist = temp_dist;
 }
 }
 done_up = temp_dist-init_dist > kernel_radius || n >= bscan_n-1;
 }
 
 if (!done_down)
 {
 n = init_bscan - i;
 temp_dist = fabs(_distance(voxel_coord, plane_eq[n]));
 
 if (temp_dist < init_dist)
 {
 pixel_type p_temp = findPixel(bscan_spacing_x, bscan_spacing_y, plane_eq, plane_points, n, temp_dist, voxel_coord);
 if (valid_pixel(p_temp, mask, bscan_w, bscan_h, temp_dist, kernel_radius))
 {
 //p = p_temp;
 min_bscan = n;
 init_dist = temp_dist;
 }
 }
 done_down = temp_dist-init_dist > kernel_radius || n <= 0;
 }
 }
 if(min_bscan == -1)
 min_bscan = init_bscan;
 
 return min_bscan;
 }*/

__kernel void vnn(__global unsigned char * mask,
		int bscan_w,
		int bscan_h,
		int bscan_n,
		float bscan_spacing_x,
		float bscan_spacing_y,
		__global unsigned char * volume,
		int volume_n,
		int volume_h,
		int volume_w,
		float volume_spacing,
		__global float4 * plane_eq,
		__global float4 * plane_points,
		__global float * printings,
		int section,
		float kernel_radius,
		__global unsigned char * frameBlock0,
		__global unsigned char * frameBlock1,
		__global unsigned char * frameBlock2,
		__global unsigned char * frameBlock3,
		__global unsigned char * frameBlock4,
		__global unsigned char * frameBlock5,
		__global unsigned char * frameBlock6,
		__global unsigned char * frameBlock7,
		__global unsigned char * frameBlock8,
		__global unsigned char * frameBlock9)
{

	int id = get_global_id(0);
	int z = id/volume_w;
	int x = id%volume_w;
	if (z >= volume_n) return;
	if (x >= volume_w) return;

	//float kernel_radius = volume_spacing*4;

	// Find bscan closest to voxel (x,0,z)
	int current_bscan = -1;
	float dist = 10000; // inf
	for (int n = 0; n < bscan_n; n++)
	{
		float4 voxel_000 =
		{	x*volume_spacing, 0.0f, z*volume_spacing, 0.0f};
		float temp = fabs(_distance(voxel_000, plane_eq[n]));
		if (temp < dist)
		{
			current_bscan = n;
			dist = temp;
		}
	}

	int print_counter = 0;

	for (int y = 0; y < volume_h; y++)
	{
		float4 voxel_coord =
		{	x*volume_spacing, y*volume_spacing, z*volume_spacing, 0.0f};

		float temp;
		int done_up = 0;
		int done_down = 0;
		int min_bscan = current_bscan;
		int n;

		dist = fabs(_distance(voxel_coord, plane_eq[current_bscan]));

		pixel_type p;

		// Looks like this code also checks if the pixel is present in the frame
		float temp_dist;
		for (int i = 1; !done_down || !done_up; i++)
		{
			if (!done_up)
			{
				n = current_bscan + i;
				temp_dist = fabs(_distance(voxel_coord, plane_eq[n]));

				if (temp_dist < dist)
				{
					pixel_type p_temp = findPixel(bscan_spacing_x, bscan_spacing_y, plane_eq, plane_points, n, dist, voxel_coord);
					if (valid_pixel(p_temp, mask, bscan_w, bscan_h, temp_dist, kernel_radius))
					{
						p = p_temp;
						min_bscan = n;
						dist = temp_dist;
					}
				}
				done_up = temp_dist-dist > kernel_radius || n >= bscan_n-1;

			}

			if (!done_down)
			{
				n = current_bscan - i;
				temp_dist = fabs(_distance(voxel_coord, plane_eq[n]));

				if (temp_dist < dist)
				{
					pixel_type p_temp = findPixel(bscan_spacing_x, bscan_spacing_y, plane_eq, plane_points, n, dist, voxel_coord);
					if (valid_pixel(p_temp, mask, bscan_w, bscan_h, temp_dist, kernel_radius))
					{
						p = p_temp;
						min_bscan = n;
						dist = temp_dist;
					}
				}
				done_down = temp_dist-dist > kernel_radius || n <= 0;
			}
		}

		current_bscan = min_bscan;
		dist = _distance(voxel_coord, plane_eq[current_bscan]);

		if (current_bscan == -1)
		continue;

		float4 normal =
		{	plane_eq[current_bscan].x, plane_eq[current_bscan].y, plane_eq[current_bscan].z, 0.0f};
		float4 corner0 = plane_points_c(current_bscan,0);
		float4 cornerx = plane_points_c(current_bscan,1);
		float4 cornery = plane_points_c(current_bscan,2);

		float4 pp = voxel_coord + -dist*normal - corner0;
		float4 x_vector = normalize(cornerx - corner0);
		float4 y_vector = normalize(cornery - corner0);

		int px = dot(pp, x_vector)/bscan_spacing_x;
		int py = dot(pp, y_vector)/bscan_spacing_y;

		p = findPixel(bscan_spacing_x, bscan_spacing_y, plane_eq, plane_points, current_bscan, dist, voxel_coord);

		//printf("current_bscan: %d, px: %d, py: %d, z: %d\n", current_bscan, px, py, z);
		if(valid_pixel(p, mask, bscan_w, bscan_h, dist, kernel_radius))
		{
			int numBlocks = 10;
			int framePos = current_bscan/numBlocks; // First position of the current frame in the frameBlock
			int pixelPos = p.x + p.y*bscan_w; // Pixel position in the frame
			int frameSize = bscan_w*bscan_h;
			int totPixelPos = framePos*frameSize + pixelPos; // Pixel position in frameBlock 
			unsigned char pixelVal; // The read pixel value
			int devReminder = current_bscan%numBlocks;
			//Select correct frameBlock
			switch(devReminder) // Need to have a case for each number (numBlocks)
			{
				case 0 :
				pixelVal = frameBlock0[totPixelPos];
				break;
				case 1 :
				pixelVal = frameBlock1[totPixelPos];
				break;
				case 2:
				pixelVal = frameBlock2[totPixelPos];
				break;
				case 3:
				pixelVal = frameBlock3[totPixelPos];
				break;
				case 4:
				pixelVal = frameBlock4[totPixelPos];
				break;
				case 5:
				pixelVal = frameBlock5[totPixelPos];
				break;
				case 6:
				pixelVal = frameBlock6[totPixelPos];
				break;
				case 7:
				pixelVal = frameBlock7[totPixelPos];
				break;
				case 8:
				pixelVal = frameBlock8[totPixelPos];
				break;
				case 9:
				pixelVal = frameBlock9[totPixelPos];
				break;
				default : // case 0
				pixelVal = frameBlock0[totPixelPos];
				//printf("Warning: Number of frame blocks are not correct/n");
			}

			volume_a(x,y,z) = pixelVal;

			//volume_a(x,y,z) = 255;//testcode
		}

	}

}
